{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\n\n\n// MAIN //\n\n/**\n* Returns a single-precision complex floating-point number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @param {Complex64} z - complex number\n* @param {number} y - number from which to derive the sign\n* @returns {Complex64} result\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-imag' );\n*\n* var v = cflipsignf( new Complex64( -4.0, 5.0 ), -55.0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 4.0\n*\n* var im = imag( v );\n* // returns -5.0\n*/\nfunction cflipsignf( z, y ) {\n\tvar re = real( z );\n\tvar im = imag( z );\n\tif ( y < 0 || isNegativeZerof( y ) ) {\n\t\tre = -re;\n\t\tim = -im;\n\t}\n\treturn new z.constructor( re, im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cflipsignf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a single-precision complex floating-point number with the same magnitude as `z` and the sign of `y*z`.\n*\n* @module @stdlib/math-base-special-cflipsignf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-imag' );\n* var cflipsignf = require( '@stdlib/math-base-special-cflipsignf' );\n*\n* var v = cflipsignf( new Complex64( -4.0, 5.0 ), -55.0 );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns 4.0\n*\n* var im = imag( v );\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["isNegativeZerof","require$$0","real","require$$1","imag","require$$2","lib","z","y","re","im","constructor"],"mappings":";;sQAsBA,IAAIA,EAAkBC,EAClBC,EAAOC,EACPC,EAAOC,EAuCX,ICfAC,EDEA,SAAqBC,EAAGC,GACvB,IAAIC,EAAKP,EAAMK,GACXG,EAAKN,EAAMG,GAKf,OAJKC,EAAI,GAAKR,EAAiBQ,MAC9BC,GAAMA,EACNC,GAAMA,GAEA,IAAIH,EAAEI,YAAaF,EAAIC"}