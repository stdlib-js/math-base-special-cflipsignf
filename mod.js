// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var t="function"==typeof Object.defineProperty?Object.defineProperty:null;var r=Object.defineProperty,e=Object.prototype,n=e.toString,o=e.__defineGetter__,i=e.__defineSetter__,a=e.__lookupGetter__,u=e.__lookupSetter__;var l=function(){try{return t({},"x",{}),!0}catch(t){return!1}}()?r:function(t,r,l){var c,f,y,p;if("object"!=typeof t||null===t||"[object Array]"===n.call(t))throw new TypeError("invalid argument. First argument must be an object. Value: `"+t+"`.");if("object"!=typeof l||null===l||"[object Array]"===n.call(l))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+l+"`.");if((f="value"in l)&&(a.call(t,r)||u.call(t,r)?(c=t.__proto__,t.__proto__=e,delete t[r],t[r]=l.value,t.__proto__=c):t[r]=l.value),y="get"in l,p="set"in l,f&&(y||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return y&&o&&o.call(t,r,l.get),p&&i&&i.call(t,r,l.set),t};function c(t,r,e){l(t,r,{configurable:!1,enumerable:!1,writable:!1,value:e})}function f(t){return"number"==typeof t}var y="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");function p(){return y&&"symbol"==typeof Symbol.toStringTag}var b=Object.prototype.toString;var m=Object.prototype.hasOwnProperty;var v,s="function"==typeof Symbol?Symbol.toStringTag:"";v=p()?function(t){var r,e,n,o,i;if(null==t)return b.call(t);e=t[s],i=s,r=null!=(o=t)&&m.call(o,i);try{t[s]=void 0}catch(r){return b.call(t)}return n=b.call(t),r?t[s]=e:delete t[s],n}:function(t){return b.call(t)};var _=v,h=Number,w=h.prototype.toString;var d=p();function g(t){return"object"==typeof t&&(t instanceof h||(d?function(t){try{return w.call(t),!0}catch(t){return!1}}(t):"[object Number]"===_(t)))}function E(t){return f(t)||g(t)}c(E,"isPrimitive",f),c(E,"isObject",g);var j="function"==typeof Math.fround?Math.fround:null,S="function"==typeof Float32Array;var A=Number.POSITIVE_INFINITY,T="function"==typeof Float32Array?Float32Array:null;var O="function"==typeof Float32Array?Float32Array:void 0;var F=function(){var t,r,e;if("function"!=typeof T)return!1;try{r=new T([1,3.14,-3.14,5e40]),e=r,t=(S&&e instanceof Float32Array||"[object Float32Array]"===_(e))&&1===r[0]&&3.140000104904175===r[1]&&-3.140000104904175===r[2]&&r[3]===A}catch(r){t=!1}return t}()?O:function(){throw new Error("not implemented")},P=new F(1);var N="function"==typeof j?j:function(t){return P[0]=t,P[0]};function U(t,r){if(!(this instanceof U))throw new TypeError("invalid invocation. Constructor must be called with the `new` keyword.");if(!f(t))throw new TypeError("invalid argument. Real component must be a number primitive. Value: `"+t+"`.");if(!f(r))throw new TypeError("invalid argument. Imaginary component must be a number primitive. Value: `"+r+"`.");return l(this,"re",{configurable:!1,enumerable:!0,writable:!1,value:N(t)}),l(this,"im",{configurable:!1,enumerable:!0,writable:!1,value:N(r)}),this}c(U,"BYTES_PER_ELEMENT",4),c(U.prototype,"BYTES_PER_ELEMENT",4),c(U.prototype,"byteLength",8),c(U.prototype,"toString",(function(){var t=""+this.re;return this.im<0?t+=" - "+-this.im:t+=" + "+this.im,t+="i"})),c(U.prototype,"toJSON",(function(){var t={type:"Complex64"};return t.re=this.re,t.im=this.im,t}));var I="function"==typeof Uint32Array;var V="function"==typeof Uint32Array?Uint32Array:null;var M="function"==typeof Uint32Array?Uint32Array:void 0;var k=function(){var t,r,e;if("function"!=typeof V)return!1;try{r=new V(r=[1,3.14,-3.14,4294967296,4294967297]),e=r,t=(I&&e instanceof Uint32Array||"[object Uint32Array]"===_(e))&&1===r[0]&&3===r[1]&&4294967293===r[2]&&0===r[3]&&1===r[4]}catch(r){t=!1}return t}()?M:function(){throw new Error("not implemented")},x=new F(1);new k(x.buffer)[0]=4286578688;var C=x[0];function L(t,r){var e,n=function(t){return t.re}(t),o=function(t){return t.im}(t);return(r<0||0===(e=r)&&1/e===C)&&(n=-n,o=-o),new U(n,o)}export{L as default};
//# sourceMappingURL=mod.js.map
